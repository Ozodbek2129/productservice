// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.18.0
// source: protos/AuthService/AuthService.proto

package AuthService

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	AuthUserService_RegisterAuth_FullMethodName     = "/AuthService.AuthUserService/RegisterAuth"
	AuthUserService_LoginAuth_FullMethodName        = "/AuthService.AuthUserService/LoginAuth"
	AuthUserService_GetAllUser_FullMethodName       = "/AuthService.AuthUserService/GetAllUser"
	AuthUserService_UpdateUser_FullMethodName       = "/AuthService.AuthUserService/UpdateUser"
	AuthUserService_UpdateUserType_FullMethodName   = "/AuthService.AuthUserService/UpdateUserType"
	AuthUserService_GetUsers_FullMethodName         = "/AuthService.AuthUserService/GetUsers"
	AuthUserService_DeleteUser_FullMethodName       = "/AuthService.AuthUserService/DeleteUser"
	AuthUserService_Passwordrecovery_FullMethodName = "/AuthService.AuthUserService/Passwordrecovery"
	AuthUserService_UpdateToken_FullMethodName      = "/AuthService.AuthUserService/UpdateToken"
	AuthUserService_CancelToken_FullMethodName      = "/AuthService.AuthUserService/CancelToken"
	AuthUserService_IdCheck_FullMethodName          = "/AuthService.AuthUserService/IdCheck"
	AuthUserService_SearchName_FullMethodName       = "/AuthService.AuthUserService/SearchName"
)

// AuthUserServiceClient is the client API for AuthUserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthUserServiceClient interface {
	RegisterAuth(ctx context.Context, in *RequestRegister, opts ...grpc.CallOption) (*ResponseRegister, error)
	LoginAuth(ctx context.Context, in *RequestLogin, opts ...grpc.CallOption) (*ReponseLogin, error)
	GetAllUser(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GetAllResponse, error)
	UpdateUser(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Status, error)
	UpdateUserType(ctx context.Context, in *TypeUserRequest, opts ...grpc.CallOption) (*Status, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error)
	Passwordrecovery(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*PasswordResponse, error)
	// rpc Login(LoginRequest) returns(LoginResponse);
	UpdateToken(ctx context.Context, in *RefreshToken, opts ...grpc.CallOption) (*TokenResponse, error)
	CancelToken(ctx context.Context, in *RefreshToken, opts ...grpc.CallOption) (*Status, error)
	IdCheck(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error)
	SearchName(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Name, error)
}

type authUserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthUserServiceClient(cc grpc.ClientConnInterface) AuthUserServiceClient {
	return &authUserServiceClient{cc}
}

func (c *authUserServiceClient) RegisterAuth(ctx context.Context, in *RequestRegister, opts ...grpc.CallOption) (*ResponseRegister, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseRegister)
	err := c.cc.Invoke(ctx, AuthUserService_RegisterAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUserServiceClient) LoginAuth(ctx context.Context, in *RequestLogin, opts ...grpc.CallOption) (*ReponseLogin, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReponseLogin)
	err := c.cc.Invoke(ctx, AuthUserService_LoginAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUserServiceClient) GetAllUser(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GetAllResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, AuthUserService_GetAllUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUserServiceClient) UpdateUser(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, AuthUserService_UpdateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUserServiceClient) UpdateUserType(ctx context.Context, in *TypeUserRequest, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, AuthUserService_UpdateUserType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUserServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUsersResponse)
	err := c.cc.Invoke(ctx, AuthUserService_GetUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUserServiceClient) DeleteUser(ctx context.Context, in *DeleteUserRequest, opts ...grpc.CallOption) (*DeleteUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteUserResponse)
	err := c.cc.Invoke(ctx, AuthUserService_DeleteUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUserServiceClient) Passwordrecovery(ctx context.Context, in *PasswordRequest, opts ...grpc.CallOption) (*PasswordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PasswordResponse)
	err := c.cc.Invoke(ctx, AuthUserService_Passwordrecovery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUserServiceClient) UpdateToken(ctx context.Context, in *RefreshToken, opts ...grpc.CallOption) (*TokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, AuthUserService_UpdateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUserServiceClient) CancelToken(ctx context.Context, in *RefreshToken, opts ...grpc.CallOption) (*Status, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Status)
	err := c.cc.Invoke(ctx, AuthUserService_CancelToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUserServiceClient) IdCheck(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, AuthUserService_IdCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authUserServiceClient) SearchName(ctx context.Context, in *Id, opts ...grpc.CallOption) (*Name, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Name)
	err := c.cc.Invoke(ctx, AuthUserService_SearchName_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthUserServiceServer is the server API for AuthUserService service.
// All implementations must embed UnimplementedAuthUserServiceServer
// for forward compatibility
type AuthUserServiceServer interface {
	RegisterAuth(context.Context, *RequestRegister) (*ResponseRegister, error)
	LoginAuth(context.Context, *RequestLogin) (*ReponseLogin, error)
	GetAllUser(context.Context, *Void) (*GetAllResponse, error)
	UpdateUser(context.Context, *UpdateRequest) (*Status, error)
	UpdateUserType(context.Context, *TypeUserRequest) (*Status, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error)
	Passwordrecovery(context.Context, *PasswordRequest) (*PasswordResponse, error)
	// rpc Login(LoginRequest) returns(LoginResponse);
	UpdateToken(context.Context, *RefreshToken) (*TokenResponse, error)
	CancelToken(context.Context, *RefreshToken) (*Status, error)
	IdCheck(context.Context, *Id) (*Response, error)
	SearchName(context.Context, *Id) (*Name, error)
	mustEmbedUnimplementedAuthUserServiceServer()
}

// UnimplementedAuthUserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthUserServiceServer struct {
}

func (UnimplementedAuthUserServiceServer) RegisterAuth(context.Context, *RequestRegister) (*ResponseRegister, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAuth not implemented")
}
func (UnimplementedAuthUserServiceServer) LoginAuth(context.Context, *RequestLogin) (*ReponseLogin, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginAuth not implemented")
}
func (UnimplementedAuthUserServiceServer) GetAllUser(context.Context, *Void) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUser not implemented")
}
func (UnimplementedAuthUserServiceServer) UpdateUser(context.Context, *UpdateRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedAuthUserServiceServer) UpdateUserType(context.Context, *TypeUserRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserType not implemented")
}
func (UnimplementedAuthUserServiceServer) GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedAuthUserServiceServer) DeleteUser(context.Context, *DeleteUserRequest) (*DeleteUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedAuthUserServiceServer) Passwordrecovery(context.Context, *PasswordRequest) (*PasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Passwordrecovery not implemented")
}
func (UnimplementedAuthUserServiceServer) UpdateToken(context.Context, *RefreshToken) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateToken not implemented")
}
func (UnimplementedAuthUserServiceServer) CancelToken(context.Context, *RefreshToken) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelToken not implemented")
}
func (UnimplementedAuthUserServiceServer) IdCheck(context.Context, *Id) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdCheck not implemented")
}
func (UnimplementedAuthUserServiceServer) SearchName(context.Context, *Id) (*Name, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchName not implemented")
}
func (UnimplementedAuthUserServiceServer) mustEmbedUnimplementedAuthUserServiceServer() {}

// UnsafeAuthUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthUserServiceServer will
// result in compilation errors.
type UnsafeAuthUserServiceServer interface {
	mustEmbedUnimplementedAuthUserServiceServer()
}

func RegisterAuthUserServiceServer(s grpc.ServiceRegistrar, srv AuthUserServiceServer) {
	s.RegisterService(&AuthUserService_ServiceDesc, srv)
}

func _AuthUserService_RegisterAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRegister)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).RegisterAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUserService_RegisterAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).RegisterAuth(ctx, req.(*RequestRegister))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUserService_LoginAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestLogin)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).LoginAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUserService_LoginAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).LoginAuth(ctx, req.(*RequestLogin))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUserService_GetAllUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).GetAllUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUserService_GetAllUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).GetAllUser(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUserService_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUserService_UpdateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).UpdateUser(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUserService_UpdateUserType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).UpdateUserType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUserService_UpdateUserType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).UpdateUserType(ctx, req.(*TypeUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUserService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUserService_GetUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUserService_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUserService_DeleteUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).DeleteUser(ctx, req.(*DeleteUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUserService_Passwordrecovery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).Passwordrecovery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUserService_Passwordrecovery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).Passwordrecovery(ctx, req.(*PasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUserService_UpdateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).UpdateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUserService_UpdateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).UpdateToken(ctx, req.(*RefreshToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUserService_CancelToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).CancelToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUserService_CancelToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).CancelToken(ctx, req.(*RefreshToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUserService_IdCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).IdCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUserService_IdCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).IdCheck(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthUserService_SearchName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Id)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthUserServiceServer).SearchName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthUserService_SearchName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthUserServiceServer).SearchName(ctx, req.(*Id))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthUserService_ServiceDesc is the grpc.ServiceDesc for AuthUserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthUserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AuthService.AuthUserService",
	HandlerType: (*AuthUserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAuth",
			Handler:    _AuthUserService_RegisterAuth_Handler,
		},
		{
			MethodName: "LoginAuth",
			Handler:    _AuthUserService_LoginAuth_Handler,
		},
		{
			MethodName: "GetAllUser",
			Handler:    _AuthUserService_GetAllUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _AuthUserService_UpdateUser_Handler,
		},
		{
			MethodName: "UpdateUserType",
			Handler:    _AuthUserService_UpdateUserType_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _AuthUserService_GetUsers_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _AuthUserService_DeleteUser_Handler,
		},
		{
			MethodName: "Passwordrecovery",
			Handler:    _AuthUserService_Passwordrecovery_Handler,
		},
		{
			MethodName: "UpdateToken",
			Handler:    _AuthUserService_UpdateToken_Handler,
		},
		{
			MethodName: "CancelToken",
			Handler:    _AuthUserService_CancelToken_Handler,
		},
		{
			MethodName: "IdCheck",
			Handler:    _AuthUserService_IdCheck_Handler,
		},
		{
			MethodName: "SearchName",
			Handler:    _AuthUserService_SearchName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/AuthService/AuthService.proto",
}
